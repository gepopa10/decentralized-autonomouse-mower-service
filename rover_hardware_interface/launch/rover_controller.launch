<?xml version="1.0" encoding="UTF-8" standalone="no" ?>
<launch>

  <arg name="model" default="$(env TURTLEBOT3_MODEL)" doc="model type [burger, waffle, waffle_pi]"/>

  <!-- Simulation with fake encoders in gazabo or real encoders -->
  <arg name="simulation" default="true" />

  <!--These are the sub topic for read in simulation -->
  <arg name="joint_state_topic" default="gazebo_rover/wheel_speed_read" />
  <param name="sim_encoders" type="bool" value="$(arg simulation)" />

  <!-- These are the sub topic with real encoders -->
  <arg name="encoder_topic_left" value="left_encoder_speed_gpio"/>
  <arg name="encoder_topic_right" value="right_encoder_speed_gpio"/>

  <rosparam file="$(find rover_hardware_interface)/config/hardware.yaml" command="load"/>
  <rosparam file="$(find rover_hardware_interface)/config/controllers.yaml" command="load"/>
  <rosparam file="$(find rover_hardware_interface)/config/joint_limits.yaml" command="load"/>

  <include file="$(find turtlebot3_bringup)/launch/includes/description.launch.xml">
    <arg name="model" value="$(arg model)" />
  </include>

  <group unless="$(arg simulation)">
    <!--Left encoder publisher -->
    <include file="$(find rover_hardware_interface)/launch/encoder.launch">
      <arg name="encoder_topic" value="$(arg encoder_topic_left)"/>
      <arg name="encoder_read_frequency" value="100"/>
      <arg name="encoder_gpio_A_num" value="24"/>
      <arg name="encoder_gpio_B_num" value="23"/>
      <arg name="motor_N" value="20"/>
    </include>
    <!--Right encoder publisher -->
    <include file="$(find rover_hardware_interface)/launch/encoder.launch">
      <arg name="encoder_topic" value="$(arg encoder_topic_right)"/>
      <arg name="encoder_read_frequency" value="100"/>
      <arg name="encoder_gpio_A_num" value="24"/>
      <arg name="encoder_gpio_B_num" value="23"/>
      <arg name="motor_N" value="20"/>
    </include>
  </group>

  <node name="rover_hardware_interface" pkg="rover_hardware_interface" type="rover_hardware_interface_node" output="screen">
    <remap from="gazebo_rover/wheel_speed_read" to="$(arg joint_state_topic)"/>
    <remap from="encoder_left_wheel_speed_read" to="$(arg encoder_topic_left)"/>
    <remap from="encoder_right_wheel_speed_read" to="$(arg encoder_topic_right)"/>
  </node>

  <!--
    The controller_spawner node starts the two wheel/joint position controllers
    for the robot by running a python script that makes a service call to the
    ros_control controller manager. The service calls tell the controller manager
     which controllers you want. It also loads a third controller that publishes
     the joint states of all the joints with hardware_interfaces and advertises
     the topic on /joint_states.
  -->
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen"
		args="mobile_base_controller base_joint_publisher"/>

  <!--
    A robot_state_publisher node simply listens to /joint_states messages from
    the joint_state_controller then publishes the transforms to /tf. This allows
    you to see your simulated robot in Rviz as well as do other tasks.
  -->
  <!--
    SOULD NOT BE LAUNCH WHEN RUNNING NAVIGATION because when we do
    roslaunch turtlebot3_navigation turtlebot3_navigation.launch
    we will launch already a robot_state_publisher via turtlebot3_remote.launch
  -->
  <!--node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
        respawn="false" output="screen" >
    <param name="publish_frequency" type="double" value="50.0" />
  </node-->
</launch>
